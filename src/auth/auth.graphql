# *** Scalars ***
scalar Date
scalar ObjectId
# *** Types Entities ***
type User {
  _id: ObjectId!
  fullName: String!
  email: String
  roles: [String!]
  verificationExpires: Date
  notifications: [Notification!]
}

# *** enums ***
enum REGISTER_ROLE {
  CLIENT
  EXPERT
}

#  ****  Inputs  ****
input LoginPayload {
  email: String!
  password: String!
}

input RegisterPayload {
  fullName: String!
  email: String!
  password: String!
  passwordConfirm: String!
  roles: [REGISTER_ROLE!]
}

input VerifyEmailPayload {
  verification: String!
}

input RefreshAccessTokenPayload {
  refreshToken: String!
}

input ForgotPasswordPayload {
  email: String!
}

input ForgotPasswordVerifyPayload {
  verification: String!
}

input ResetPasswordPayload {
  verification: String!
}


# **** Outputs ****
type LoginOutput {
  email: String!
  accessToken: String!
  refreshToken: String!
}
type RegisterOutput {
  fullName: String!
  email: String!
}
type VerifyEmailOutput {
  fullName: String!
  email: String!
  accessToken: String!
  refreshToken: String!
}
type RefreshAccesTokenOutput {
  accessToken: String!
}
type ForgotPasswordOutput {
  email: String!
  message: String!
}

type ForgotPasswordVerifyOutput {
  email: String!
  message: String!
}

type ResetPasswordOutput {
  email: String!
  message: String!
}

# **** Mutations ****
type Mutation {
  login(payload: LoginPayload!): LoginOutput
  register(payload: RegisterPayload!): RegisterOutput
  verifyEmail(payload: VerifyEmailPayload!): VerifyEmailOutput
  refreshAccessToken(payload: RefreshAccessTokenPayload!): RefreshAccesTokenOutput
  forgotPassword(payload: ForgotPasswordPayload!): ForgotPasswordOutput
  forgotPasswordVerify(payload: ForgotPasswordVerifyPayload!): ForgotPasswordVerifyOutput
  resetPassword(payload: ResetPasswordPayload!): ResetPasswordOutput
}